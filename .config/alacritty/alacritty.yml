# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
# env:
# TERM variable
#
# This value is used to set the `$TERM` environment variable for
# each instance of Alacritty. If it is not present, alacritty will
# check the local terminfo database and use 'alacritty' if it is
# available, otherwise 'xterm-256color' is used.
#
# TERM: xterm-256color
window:
  dynamic_title: true
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 0
    lines: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is not scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 2
    y: 2

  # Window decorations
  #
  # Available values:
  # - `full`: Window with title bar and title bar buttons
  # - `none`: Window without title bar, rounded corners, or drop shadow
  # - `transparent`: Window with title bar with transparent background and title
  #   bar buttons
  # - `buttonless`: Window with title bar with transparent background and no
  #   title bar buttons
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #     - buttonless: Title bar, transparent background and title bar buttons
  #     - transparent: Title bar, transparent background, but no title bar buttons
  decorations: transparent
  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  #startup_mode: Windowed

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 100000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # Normal (roman) font face
  normal:
    family: PragmataPro Mono Liga
    # The `style` can be specified to pick a specific face.
    style: Regular

  # Italic font face
  bold:
    family: PragmataPro Mono Liga
    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    family: PragmataPro Mono Liga
    # The `style` can be specified to pick a specific face.
    style: Italic

  bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: Hack

    # The `style` can be specified to pick a specific face.
    style: Bold Italic

  # Point size
  size: 14.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Colors (Tomorrow Night Bright)
colors:
  name: Simple Rainbow
  author: ""
  primary:
    background: "#575757"
    foreground: "#dcdccc"
  cursor:
    text: "#575757"
    cursor: "#bde270"
  normal:
    black: "#666666"
    red: "#ff8278"
    green: "#bde077"
    yellow: "#eadc84"
    blue: "#77bee0"
    magenta: "#dd91f3"
    cyan: "#ffc178"
    white: "#dddddd"
  bright:
    black: "#888888"
    red: "#ff8278"
    green: "#bde077"
    yellow: "#eadc84"
    blue: "#77bee0"
    magenta: "#dd91f3"
    cyan: "#ffc178"
    white: "#cccccc"
# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0

selection:
  semantic_escape_chars: ',‚îÇ`|:"'' ()[]{}<>'

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux) user login shell
#   - (Windows) powershell
# shell:
#  program: langtmux
# args:
#   - --login
# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None
# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

#debug:
# Display the time it takes to redraw each frame.
#render_timer: false
# Keep the log file after quitting Alacritty.
#persistent_logging: false
# Log level
#
# Values for `log_level`:
#   - None
#   - Error
#   - Warn
#   - Info
#   - Debug
#   - Trace
#log_level: Warn
# Print all received window events.
#print_events: false
# Record all characters and escape sequences as test data.
#ref_test: false
mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux) xdg-open
    #   - (Windows) explorer
    #launcher:
    #  program: xdg-open
    #  args: []
    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    modifiers: Shift

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Right, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify
# a key and modifiers required to trigger it, terminal modes where the binding
# is applicable, and what should be done when the key binding fires. It can
# either send a byte sequnce to the running application (`chars`), execute
# a predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Example:
#   `- { key: V, mods: Command, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#   http://tomaka.github.io/glium_text/glium/glutin/enum.VirtualKeyCode.html
#### https://github.com/shicks/config/blob/21e6f7dca9df9cdc34be5b461954fb9da9f72742/alacritty.yml
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
#
# Want to add a binding (e.g. "PageUp") but are unsure what the X sequence
# (e.g. "\x1b[5~") is? Open another terminal (like xterm) without tmux,
# then run `showkey -a` to get the sequence associated to a key combination.
# Note: AppCursor and AppKeypad mode seem to refer to the following:
#   http://www.tldp.org/HOWTO/Keyboard-and-Console-HOWTO-21.html
# It's not clear to me why I care to send different keys for these modes.
# One place it makes a difference is that shift works differently in AppKeypad
# mode when numlock is off: it does not send numbers, but instead weird
# shifted keycodes (home's ^[OH becomes ^[O2w, for instance), FWIW.
# Other possibly interesting references:
#    http://www.tldp.org/HOWTO/Keyboard-and-Console-HOWTO-21.html (special keys)
#    https://ttssh2.osdn.jp/manual/en/usage/tips/appkeypad.html
#
# Values for `mods`:
#   - Command
#   - Control
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#   (macOS only action):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
  - { key: Home, chars: "\eOH", mode: AppCursor }
  - { key: Home, chars: "\e[H", mode: ~AppCursor }
  - { key: End, chars: "\eOF", mode: AppCursor }
  - { key: End, chars: "\e[F", mode: ~AppCursor }
  - { key: Key0, mods: Command, action: ResetFontSize }
  - { key: Equals, mods: Command, action: IncreaseFontSize }
  - { key: Minus, mods: Command, action: DecreaseFontSize }
  - { key: PageUp, mods: Shift, chars: "\e[5;2~" }
  - { key: PageUp, mods: Control, chars: "\e[5;5~" }
  - { key: PageUp, chars: "\e[5~" }
  - { key: PageDown, mods: Shift, chars: "\e[6;2~" }
  - { key: PageDown, mods: Control, chars: "\e[6;5~" }
  - { key: PageDown, chars: "\e[6~" }
  - { key: Tab, mods: Shift, chars: "\e[Z" }
  - { key: Back, chars: "" }
  - { key: Back, mods: Alt, chars: "\e" }
  - { key: Insert, chars: "\e[2~" }
  - { key: Delete, chars: "\e[3~" }
  - { key: Left, mods: Shift, chars: "\e[1;2D" }
  - { key: Left, mods: Control, chars: "\e[1;5D" }
  - { key: Left, mods: Alt, chars: "\e[1;3D" }
  - { key: Left, chars: "\e[D", mode: ~AppCursor }
  - { key: Left, chars: "\eOD", mode: AppCursor }
  - { key: Right, mods: Shift, chars: "\e[1;2C" }
  - { key: Right, mods: Control, chars: "\e[1;5C" }
  - { key: Right, mods: Alt, chars: "\e[1;3C" }
  - { key: Right, chars: "\e[C", mode: ~AppCursor }
  - { key: Right, chars: "\eOC", mode: AppCursor }
  - { key: Up, mods: Shift, chars: "\e[1;2A" }
  - { key: Up, mods: Control, chars: "\e[1;5A" }
  - { key: Up, mods: Alt, chars: "\e[1;3A" }
  - { key: Up, chars: "\e[A", mode: ~AppCursor }
  - { key: Up, chars: "\eOA", mode: AppCursor }
  - { key: Down, mods: Shift, chars: "\e[1;2B" }
  - { key: Down, mods: Control, chars: "\e[1;5B" }
  - { key: Down, mods: Alt, chars: "\e[1;3B" }
  - { key: Down, chars: "\e[B", mode: ~AppCursor }
  - { key: Down, chars: "\eOB", mode: AppCursor }
  - { key: F1, chars: "\eOP" }
  - { key: F2, chars: "\eOQ" }
  - { key: F3, chars: "\eOR" }
  - { key: F4, chars: "\eOS" }
  - { key: F5, chars: "\e[15~" }
  - { key: F6, chars: "\e[17~" }
  - { key: F7, chars: "\e[18~" }
  - { key: F8, chars: "\e[19~" }
  - { key: F9, chars: "\e[20~" }
  - { key: F10, chars: "\e[21~" }
  - { key: F11, chars: "\e[23~" }
  - { key: F12, chars: "\e[24~" }
  - { key: F1, mods: Shift, chars: "\e[1;2P" }
  - { key: F2, mods: Shift, chars: "\e[1;2Q" }
  - { key: F3, mods: Shift, chars: "\e[1;2R" }
  - { key: F4, mods: Shift, chars: "\e[1;2S" }
  - { key: F5, mods: Shift, chars: "\e[15;2~" }
  - { key: F6, mods: Shift, chars: "\e[17;2~" }
  - { key: F7, mods: Shift, chars: "\e[18;2~" }
  - { key: F8, mods: Shift, chars: "\e[19;2~" }
  - { key: F9, mods: Shift, chars: "\e[20;2~" }
  - { key: F10, mods: Shift, chars: "\e[21;2~" }
  - { key: F11, mods: Shift, chars: "\e[23;2~" }
  - { key: F12, mods: Shift, chars: "\e[24;2~" }
  - { key: F1, mods: Control, chars: "\e[1;5P" }
  - { key: F2, mods: Control, chars: "\e[1;5Q" }
  - { key: F3, mods: Control, chars: "\e[1;5R" }
  - { key: F4, mods: Control, chars: "\e[1;5S" }
  - { key: F5, mods: Control, chars: "\e[15;5~" }
  - { key: F6, mods: Control, chars: "\e[17;5~" }
  - { key: F7, mods: Control, chars: "\e[18;5~" }
  - { key: F8, mods: Control, chars: "\e[19;5~" }
  - { key: F9, mods: Control, chars: "\e[20;5~" }
  - { key: F10, mods: Control, chars: "\e[21;5~" }
  - { key: F11, mods: Control, chars: "\e[23;5~" }
  - { key: F12, mods: Control, chars: "\e[24;5~" }
  - { key: F1, mods: Alt, chars: "\e[1;6P" }
  - { key: F2, mods: Alt, chars: "\e[1;6Q" }
  - { key: F3, mods: Alt, chars: "\e[1;6R" }
  - { key: F4, mods: Alt, chars: "\e[1;6S" }
  - { key: F5, mods: Alt, chars: "\e[15;6~" }
  - { key: F6, mods: Alt, chars: "\e[17;6~" }
  - { key: F7, mods: Alt, chars: "\e[18;6~" }
  - { key: F8, mods: Alt, chars: "\e[19;6~" }
  - { key: F9, mods: Alt, chars: "\e[20;6~" }
  - { key: F10, mods: Alt, chars: "\e[21;6~" }
  - { key: F11, mods: Alt, chars: "\e[23;6~" }
  - { key: F12, mods: Alt, chars: "\e[24;6~" }
  - { key: F1, mods: Command, chars: "\e[1;3P" }
  - { key: F2, mods: Command, chars: "\e[1;3Q" }
  - { key: F3, mods: Command, chars: "\e[1;3R" }
  - { key: F4, mods: Command, chars: "\e[1;3S" }
  - { key: F5, mods: Command, chars: "\e[15;3~" }
  - { key: F6, mods: Command, chars: "\e[17;3~" }
  - { key: F7, mods: Command, chars: "\e[18;3~" }
  - { key: F8, mods: Command, chars: "\e[19;3~" }
  - { key: F9, mods: Command, chars: "\e[20;3~" }
  - { key: F10, mods: Command, chars: "\e[21;3~" }
  - { key: F11, mods: Command, chars: "\e[23;3~" }
  - { key: F12, mods: Command, chars: "\e[24;3~" }
  - { key: NumpadEnter, chars: "\n" }
  - { key: N, mods: Command, action: SpawnNewInstance }

  - { key: Grave, mods: Alt, chars: "\e`" }
  # Alt + `
  - { key: Grave, mods: Alt|Shift, chars: "\e~" }
  # Alt + ~
  - { key: Period, mods: Alt, chars: "\e." }
  # Alt + .
  - { key: Key8, mods: Alt|Shift, chars: "\e*" }
  # Alt + *
  - { key: Key3, mods: Alt|Shift, chars: "\e#" }
  # Alt + #
  - { key: Comma, mods: Alt|Shift, chars: "\e<" }
  # Alt + <
  - { key: Period, mods: Alt|Shift, chars: "\e>" }
  # Alt + >
  - { key: Key5, mods: Alt|Shift, chars: "\e%" }
  # Alt + %
  - { key: Key6, mods: Alt|Shift, chars: "\e^" }
  # Alt + ^
  - { key: Backslash, mods: Alt, chars: "\e\\" }
  # Alt + \
  - { key: Backslash, mods: Alt|Shift, chars: "\e|" }
  # Alt + |
  - { key: Apostrophe, mods: Alt, chars: "\e'" }
  # Alt + '
  # ----------------------------------------------------------------------------------------------------
  - { key: Key1, mods: Alt, chars: "\e1" }
  - { key: Key2, mods: Alt, chars: "\e2" }
  - { key: Key3, mods: Alt, chars: "\e3" }
  - { key: Key4, mods: Alt, chars: "\e4" }
  - { key: Key5, mods: Alt, chars: "\e5" }
  - { key: Key6, mods: Alt, chars: "\e6" }
  - { key: Key7, mods: Alt, chars: "\e7" }
  - { key: Key8, mods: Alt, chars: "\e8" }
  - { key: Key9, mods: Alt, chars: "\e9" }
  - { key: Key0, mods: Alt, chars: "\e0" }
  - { key: Minus, mods: Alt, chars: "\e-" }
  - { key: Equals, mods: Alt, chars: "\e=" }
  - { key: A, mods: Alt, chars: "\ea" }
  - { key: B, mods: Alt, chars: "\eb" }
  - { key: C, mods: Alt, chars: "\ec" }
  - { key: D, mods: Alt, chars: "\ed" }
  - { key: E, mods: Alt, chars: "\ee" }
  - { key: F, mods: Alt, chars: "\ef" }
  - { key: G, mods: Alt, chars: "\eg" }
  - { key: H, mods: Alt, chars: "\eh" }
  - { key: I, mods: Alt, chars: "\ei" }
  - { key: J, mods: Alt, chars: "\ej" }
  - { key: K, mods: Alt, chars: "\ek" }
  - { key: L, mods: Alt, chars: "\el" }
  - { key: M, mods: Alt, chars: "\em" }
  - { key: N, mods: Alt, chars: "\en" }
  - { key: O, mods: Alt, chars: "\eo" }
  - { key: P, mods: Alt, chars: "\ep" }
  - { key: Q, mods: Alt, chars: "\eq" }
  - { key: R, mods: Alt, chars: "\er" }
  - { key: S, mods: Alt, chars: "\es" }
  - { key: T, mods: Alt, chars: "\et" }
  - { key: U, mods: Alt, chars: "\eu" }
  - { key: V, mods: Alt, chars: "\ev" }
  - { key: W, mods: Alt, chars: "\ew" }
  - { key: X, mods: Alt, chars: "\ex" }
  - { key: Y, mods: Alt, chars: "\ey" }
  - { key: Z, mods: Alt, chars: "\ez" }
  - { key: Escape, mods: Alt, chars: "\e" }
  - { key: Key1, mods: Alt|Shift, chars: "\e!" }
  - { key: Key2, mods: Alt|Shift, chars: "\e#" }
  - { key: Key3, mods: Alt|Shift, chars: "\e$" }
  - { key: Key4, mods: Alt|Shift, chars: "\e$" }
  - { key: Key5, mods: Alt|Shift, chars: "\e%" }
  - { key: Key6, mods: Alt|Shift, chars: "\e^" }
  - { key: Key7, mods: Alt|Shift, chars: "\e&" }
  - { key: Key8, mods: Alt|Shift, chars: "\e*" }
  - { key: Key9, mods: Alt|Shift, chars: "\e(" }
  - { key: Key0, mods: Alt|Shift, chars: "\e)" }
  - { key: Minus, mods: Alt|Shift, chars: "\e_" }
  - { key: Equals, mods: Alt|Shift, chars: "\e+" }
  - { key: A, mods: Alt|Shift, chars: "\eA" }
  - { key: B, mods: Alt|Shift, chars: "\eB" }
  - { key: C, mods: Alt|Shift, chars: "\eC" }
  - { key: D, mods: Alt|Shift, chars: "\eD" }
  - { key: E, mods: Alt|Shift, chars: "\eE" }
  - { key: F, mods: Alt|Shift, chars: "\eF" }
  - { key: G, mods: Alt|Shift, chars: "\eG" }
  - { key: H, mods: Alt|Shift, chars: "\eH" }
  - { key: I, mods: Alt|Shift, chars: "\eI" }
  - { key: J, mods: Alt|Shift, chars: "\eJ" }
  - { key: K, mods: Alt|Shift, chars: "\eK" }
  - { key: L, mods: Alt|Shift, chars: "\eL" }
  - { key: M, mods: Alt|Shift, chars: "\eM" }
  - { key: N, mods: Alt|Shift, chars: "\eN" }
  - { key: O, mods: Alt|Shift, chars: "\eO" }
  - { key: P, mods: Alt|Shift, chars: "\eP" }
  - { key: Q, mods: Alt|Shift, chars: "\eQ" }
  - { key: R, mods: Alt|Shift, chars: "\eR" }
  - { key: S, mods: Alt|Shift, chars: "\eS" }
  - { key: T, mods: Alt|Shift, chars: "\eT" }
  - { key: U, mods: Alt|Shift, chars: "\eU" }
  - { key: V, mods: Alt|Shift, chars: "\eV" }
  - { key: W, mods: Alt|Shift, chars: "\eW" }
  - { key: X, mods: Alt|Shift, chars: "\eX" }
  - { key: Y, mods: Alt|Shift, chars: "\eY" }
  - { key: Z, mods: Alt|Shift, chars: "\eZ" }

  - { key: Space, mods: Control, chars: "\0" }
  - { key: Space, mods: Alt, chars: "\e " }
  - { key: Space, mods: Alt|Shift, chars: "\e " }

  - { key: Semicolon, mods: Alt, chars: "\e;" }
  - { key: Semicolon, mods: Alt|Shift, chars: "\e:" }

  - { key: LBracket, mods: Alt, chars: "\e[" }
  - { key: RBracket, mods: Alt, chars: "\e]" }
  - { key: LBracket, mods: Alt|Shift, chars: "\e{" }
  - { key: RBracket, mods: Alt|Shift, chars: "\e}" }

  - { key: V, mods: Command, action: Paste }
  - { key: C, mods: Command, action: Copy }
  - { key: Paste, action: Paste }
  - { key: Paste, mods: Command, action: Paste }
  - { key: Copy, action: Copy }
  - { key: H, mods: Command, action: Hide }
  - { key: Q, mods: Command, action: Quit }
  - { key: G, mods: Control, chars: "\a" }

  - { key: Semicolon, mods: Control, chars: "\e+\e+C;" }
  - { key: Semicolon, mods: Control|Shift, chars: "\e+\e+C:" }

  - { key: Period, mods: Control, chars: "\e+\e+C." }
  - { key: Period, mods: Control|Shift, chars: "\e+\e+C>" }

  - { key: Comma, mods: Control, chars: "\e+\e+C," }
  - { key: Comma, mods: Control|Shift, chars: "\e+\e+C<" }

  - { key: Apostrophe, mods: Control|Shift, chars: "\e+\e+C\"" }
  - { key: Apostrophe, mods: Control, chars: "\e+\e+C'" }

  - { key: Slash, mods: Control, chars: "\x1f" }
  - { key: Slash, mods: Control|Shift, chars: "\e+\e+C?" }
  - { key: Q, mods: Control, chars: "\x11" }
  - { key: K, mods: Command, chars: "\e+\e+Dk" }
